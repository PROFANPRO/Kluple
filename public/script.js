// === Telegram WebApp ===
const tg = window.Telegram?.WebApp;
tg?.expand();

const userPhoto = document.getElementById('userPhoto');
const user = tg?.initDataUnsafe?.user;
if (user?.photo_url) userPhoto.src = user.photo_url;
userPhoto.addEventListener('click', () => {
  if (user?.username) window.open('https://t.me/' + user.username, '_blank');
});

// === TonConnect UI ===//
const balanceDisplay = document.getElementById('balanceDisplay');

let userAddress = null;
let userId = tg?.initDataUnsafe?.user?.id || null;

// === –°–æ–∑–¥–∞—ë–º TonConnect UI ===
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π TON_CONNECT_UI (CDN-–≤–µ—Ä—Å–∏—è)
const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
  manifestUrl: 'https://raw.githubusercontent.com/PROFANPRO/Kluple/main/public/tonconnect-manifest.json',
  buttonRootId: 'ton-connect-btn' // –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —ç—Ç–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∞–≤—Ç–æ-—Ä–µ–¥–∏—Ä–µ–∫—Ç, –≤–æ–∑–≤—Ä–∞—Ç –≤ TMA)
tonConnectUI.uiOptions = {
  actionsConfiguration: {
    skipRedirectToWallet: 'never', // –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—à–µ–ª—ë–∫
    returnStrategy: 'none',
    twaReturnUrl: 'https://t.me/<your_bot>' // –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å—Å—ã–ª–∫—É —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞
  },
  uiPreferences: {
    theme: 'dark',
    borderRadius: 's'
  }
};

// === –ë–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ backend ===
async function updateBalanceByBackend(friendlyAddress) {
  try {
    const resp = await fetch(`/api/balance?userAddress=${encodeURIComponent(friendlyAddress)}`);
    const data = await resp.json();
    if (resp.ok) {
      balanceDisplay.textContent = (Number(data.balanceTON) || 0).toFixed(4) + ' TON';
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', data.error);
      balanceDisplay.textContent = '0 TON';
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–∞–ª–∞–Ω—Å–∞:', e);
    balanceDisplay.textContent = '0 TON';
  }
}

// === –°–ª—É—à–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===
tonConnectUI.onStatusChange(async (wallet) => {
  if (wallet?.account?.address) {
    userAddress = wallet.account.address;
    console.log('[TonConnectUI] –ö–æ—à–µ–ª—ë–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:', userAddress);

    if (userId) {
      try {
        const resp = await fetch('/api/link-wallet', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ userId, wallet: userAddress })
        });

        const data = await resp.json();
        if (!resp.ok || data.error) {
          alert(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫–æ—à–µ–ª—å–∫–∞');
          await tonConnectUI.disconnect();
          return;
        }
        console.log('[link-wallet] –ü—Ä–∏–≤—è–∑–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ:', data.wallet);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ link-wallet:', err);
        await tonConnectUI.disconnect();
        return;
      }
    }

    walletIcon.style.display = "inline-block";
    updateBalanceByBackend(userAddress);
    closeWalletModal();
  } else {
    resetWalletUI();
  }
});

// === –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ===
window.addEventListener('load', async () => {
  await tonConnectUI.restoreConnection();
  if (tonConnectUI.account?.address) {
    userAddress = tonConnectUI.account.address;
    updateBalanceByBackend(userAddress);
    walletIcon.style.display = "inline-block";
  }
});

// === –ö–Ω–æ–ø–∫–∏ ===
walletIcon.onclick = () => walletDropdown.classList.toggle('show');

disconnectBtn.onclick = async () => {
  try {
    if (userId && userAddress) {
      await fetch('/api/unlink-wallet', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId, wallet: userAddress })
      });
    }
    await tonConnectUI.disconnect();
    resetWalletUI();
    walletDropdown.classList.remove('show');
  } catch (e) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ disconnect:', e);
  }
};

function resetWalletUI() {
  walletIcon.style.display = "none";
  balanceDisplay.textContent = '0 TON';
  userAddress = null;
}

// === –ú–æ–¥–∞–ª–∫–∏ ===
function openPromoModal() { document.getElementById('promoModal').style.display = 'flex'; }
function closePromoModal() { document.getElementById('promoModal').style.display = 'none'; }
function openMenu() { document.getElementById('menuModal').style.display = 'flex'; }
function closeMenu() { document.getElementById('menuModal').style.display = 'none'; }
function closeWalletModal() { document.getElementById('walletModal').style.display = 'none'; }
function openDepositModal() {
  if (!userAddress) return alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫!');
  document.getElementById('depositModal').style.display = 'flex';
}
function closeDepositModal() { document.getElementById('depositModal').style.display = 'none'; }
function openWithdrawModal() { document.getElementById('withdrawModal').style.display = 'flex'; }
function closeWithdrawModal() { document.getElementById('withdrawModal').style.display = 'none'; }

// === –î–µ–ø–æ–∑–∏—Ç ===
async function confirmDeposit() {
  const val = document.getElementById('depositAmount').value;
  if (!val || isNaN(val) || Number(val) <= 0) return alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
  if (!userAddress || !tonConnectUI.connected) return alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫!');

  try {
    const cashierResp = await fetch('/api/get-cashier-address');
    const cashierData = await cashierResp.json();
    if (!cashierResp.ok || !cashierData?.address) return alert(cashierData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∫–∞—Å—Å—ã');

    const cashierAddress = cashierData.address;
    const nanoAmount = Math.floor(Number(val) * 1e9);

    const tx = {
      validUntil: Math.floor(Date.now() / 1000) + 300,
      messages: [{ address: cashierAddress, amount: String(nanoAmount) }]
    };

    console.log("[TonConnectUI] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:", tx);
    await tonConnectUI.sendTransaction(tx, { skipRedirectToWallet: 'never' });

    closeDepositModal();
    alert('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç...');
    setTimeout(() => updateBalanceByBackend(userAddress), 7000);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', err);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
  }
}

// === –í—ã–≤–æ–¥ ===
async function confirmWithdraw() {
  const val = document.getElementById('withdrawAmount').value;
  if (!val || isNaN(val) || Number(val) <= 0) return alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É');
  alert('–í—ã–≤–æ–¥ —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –î–æ–±–∞–≤—å /api/withdraw —Å –ø–æ–¥–ø–∏—Å—å—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.');
  closeWithdrawModal();
}

// === –ò–≥—Ä—ã ===
let selectedChoice = null;
function selectChoice(choice) {
  selectedChoice = choice;
  document.querySelectorAll('.choice-btn').forEach(btn => btn.classList.remove('active-choice'));
  document.querySelector(`.choice-btn[data-choice="${choice}"]`)?.classList.add('active-choice');
}
function openGame(game) {
  document.querySelectorAll('.container').forEach(c => c.classList.remove('active'));
  document.getElementById('gameContainer').classList.add('active');
  const titles = { roulette: "–†—É–ª–µ—Ç–∫–∞", ninja: "–ù–∏–Ω–¥–∑—è", tower: "–ë–∞—à–Ω—è", seven: "–ü–æ–¥ 7 –Ω–∞–¥", cs: "CS", luck: "–ö–æ–ª–µ—Å–æ —É–¥–∞—á–∏" };
  document.getElementById('gameTitle').textContent = titles[game] || "–ò–≥—Ä–∞";
  document.getElementById('betAmount').value = '';
  document.getElementById('gameResult').textContent = '';
  const choiceBlock = document.querySelector('.choice-buttons');
  const diceArea = document.getElementById('diceArea');
  if (game === 'seven') { choiceBlock.style.display = 'flex'; diceArea.style.display = 'flex'; }
  else { choiceBlock.style.display = 'none'; diceArea.style.display = 'none'; }
}
function closeGame() {
  document.getElementById('gameContainer').classList.remove('active');
  showPage('games', document.querySelector('.bottom-nav .nav-item:nth-child(2)'));
}
function startGame() {
  const betInput = document.getElementById('betAmount');
  const resultEl = document.getElementById('gameResult');
  const betBtn = document.getElementById('betBtn');
  const bet = Number(betInput.value);
  if (!bet || bet <= 0) return alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É!');
  if (!selectedChoice) return alert('–°–¥–µ–ª–∞–π—Ç–µ –≤—ã–±–æ—Ä: <7, =7 –∏–ª–∏ >7');

  betBtn.disabled = true;
  betBtn.textContent = '–û–∂–∏–¥–∞–Ω–∏–µ...';

  const diceArea = document.getElementById('diceArea');
  const countdown = document.getElementById('countdown');

  resultEl.textContent = '';
  diceArea.innerHTML = '';
  diceArea.style.display = 'none';

  countdown.style.display = 'block';
  let timer = 5;
  countdown.textContent = timer;
  const interval = setInterval(() => {
    timer--;
    if (timer > 0) countdown.textContent = timer;
    else {
      clearInterval(interval);
      countdown.style.display = 'none';

      const dice1 = Math.floor(Math.random() * 6) + 1;
      const dice2 = Math.floor(Math.random() * 6) + 1;
      const sum = dice1 + dice2;

      diceArea.innerHTML = `<div class="dice">${dice1}</div><div class="dice">${dice2}</div>`;
      diceArea.style.display = 'flex';

      let win = false;
      if (selectedChoice === '<' && sum < 7) win = true;
      if (selectedChoice === '=' && sum === 7) win = true;
      if (selectedChoice === '>' && sum > 7) win = true;

      resultEl.style.color = win ? '#22c55e' : '#ef4444';
      resultEl.textContent = `–í—ã–ø–∞–ª–æ ${sum}. ${win ? `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${bet * 2}! üéâ` : '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ üòî'}`;

      setTimeout(() => {
        betBtn.disabled = false;
        betBtn.textContent = '–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É';
      }, 1500);
    }
  }, 1000);
}

// === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π ===
document.addEventListener('DOMContentLoaded', () => {
  document.getElementById('depositSubmit')?.addEventListener('click', (e) => {
    e.preventDefault();
    confirmDeposit();
  });
  document.getElementById('withdrawSubmit')?.addEventListener('click', (e) => {
    e.preventDefault();
    confirmWithdraw();
  });
});
